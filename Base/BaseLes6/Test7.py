"""
Профилирование эффективности генератора

Ранее мы узнали, что использование генераторов является отличным способом оптимизации памяти. И хотя генератор
бесконечной последовательности является наиболее ярким примером этой оптимизации, рассмотрим еще один пример
с возведением числа в квадрат и проверим размер полученных объектов.

Это можно осуществить с помощью вызова функции sys.getsizeof():
"""
import sys

nums_squared_lc = [i * 2 for i in range(10000)]
sys.getsizeof(nums_squared_lc)
# 87624
nums_squared_gc = (i ** 2 for i in range(10000))
print(sys.getsizeof(nums_squared_gc))
# 112

"""
В данном случае размер списка, полученного с помощью выражения составляет 87 624 байта, а размер генератора — 
только 112. То есть, список занимает памяти в 782 раз больше, чем генератор!!!!!!!
Однако нужно помнить одну вещь. Если размер списка меньше доступной памяти на работающей машине, тогда обработка его 
будет занимать меньше времени, чем аналогичная обработка генератора. Чтобы удостовериться в этом, просуммируем 
результаты приведенных выше выражений. Вы можете использовать для анализа функцию cProfile.run():
"""

import cProfile

cProfile.run('sum([i * 2 for i in range(10000)])')
cProfile.run('sum((i * 2 for i in range(10000)))')
