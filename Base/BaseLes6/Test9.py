"""
Генераторы Python

Новое определение функции csv_reader():
"""


def csv_reader(file_name):
    for row in open(file_name, "r"):
        yield row


csv_gen = csv_reader("../../../../Навчання/Base/Урок 6/examples/some_csv.txt")
row_count = 0
for row in csv_gen:
    row_count += 1
print(f"Row count is {row_count}")


"""     
В этой версии вы открываете файл и проходите его содержимое, возвращая ряд за рядом. Этот код выводит следующий 
результат без каких-либо ошибок:

Row count is 30

Почему так получилось? Да потому что вы по сути превратили функцию csv_reader() в генератор. Эта версия кода открывает 
файл, проходит по строкам и извлекает для чтения лишь отдельный ряд, вместо того, чтобы возвращать весь файл целиком.

Также можем определить выражение создающее генератор, которое очень похоже по синтаксису на выражение создающее 
список. В таком виде можно использовать генератор без вызова функции:
"""


csv_gen = (row for row in open(
    "../../../../Навчання/Base/Урок 6/examples/some_csv.txt"))
# ['1\n', '2\n', '3\n', '4\n', '5\n', '6\n', '7\n', '8\n', '9\n', '10\n', '11\n', '12\n', '13\n', '14\n', '15\n',
# '16\n', '17\n', '18\n', '19\n', '20\n', '21\n', '22\n', '23\n', '24\n', '25\n', '26\n', '27\n', '28\n', '29\n', '30']
print(list(csv_gen))
# <generator object <genexpr> at 0x000001C5A0941E70>
print(csv_gen)

"""
Такой способ создания генератора csv_gen является более лаконичным.

Основные отличия между использованием ключевых слов yield и return:

Использование yield приведет к созданию генератора.
Использование return приведет к возврату только первой строки файла.
"""