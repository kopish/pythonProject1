"""
Нахождение палиндромов

Можно использовать бесконечные последовательности множеством различных способов.Одним из них, является создание
детектора палиндромов. Детектор палиндромов выявляет все последовательности букв и цифр, которые являются
палиндромами. Это слова или числа, которые читаются одинаково вперед и назад, как «151» например. Сперва зададим
наш числовой детектор палиндромов:
"""


def is_palindrome(num):
    # Skip single-digit inputs
    if num // 10 == 0:
        return False
    temp = num
    reversed_num = 0
    while temp != 0:
        reversed_num = (reversed_num * 10) + (temp % 10)
        temp = temp // 10
    if num == reversed_num:
        return num
    else:
        return False


"""
Функция принимает введенное число, переворачивает его, и сравнивает с оригиналом. Теперь вы можете использовать
генератор бесконечной последовательности для получения бегущего списка со всеми числовыми палиндромами:
"""


def infinite_sequence():
    num = 0
    while True:
        yield num
        num += 1


"""
Этот блок кода не велик и хорошо смотрится. Сперва, задаем переменную num и создаем бесконечный цикл. Затем 
немедленно извлекаем num с помощью yield в ее исходном состоянии (это во многом повторяет то, что делает range()). 
После этого мы увеличиваем num на 1.

Если попробовать запустить этот код в теле цикла for, то увидим, что на самом деле он бесконечный:
"""

for i in infinite_sequence():
    pal = is_palindrome(i)
    if pal:
        print(pal)

"""
11
22
33
[...]
99799
99899
99999
100001
101101
102201
KeyboardInterrupt
Traceback(most
recent
call
last):
File
"<stdin>", line
2, in < module >
File
"<stdin>", line
5, in is_palindrome

В консоли выводятся только те номера, которые читаются одинаково и вперед и назад.

Примечание: на практике вряд ли придется писать свой собственный бесконечный генератор последовательностей, по той 
простой причине, что есть уже очень эффективный генератор itertools.count() из модуля itertools.
"""
