'''
Модуль CSV имеет несколько функций и классов, доступных для чтения и записи CSV, и они включают в себя:

функция csv.reader
функция csv.writer
класс csv.Dictwriter
класс csv.DictReader

csv.reader
Модуль csv.reader принимает следующие параметры:

csvfile: обычно это объект, который поддерживает протокол итератора и обычно возвращает строку каждый раз, когда вызывается его метод __next__().
dialect='excel': необязательный параметр, используемый для определения набора параметров, специфичных для определенного диалекта CSV.
fmtparams: необязательный параметр, который можно использовать для переопределения существующих параметров форматирования.


Чтение из файлов (парсинг)
Для того чтобы прочитать данные из файла, программист должен создать объект reader:

reader_object = csv.reader(file, delimiter = ",")
reader имеет метод __next__(), то есть является итерируемым объектом, поэтому чтение из файла происходит следующим образом:
'''

import csv
# Использование конструкции with…as позволяет программисту быть уверенным, что файл будет закрыт, даже если при
# выполнении кода произойдет какая-то ошибка при открытии нужно указать правильную кодировку, в которой сохранены
# данные. В данном случае encoding=’utf-8′. Если не указывать, то будет использоваться кодировка по умолчанию. Для
# Windows это cp1251.
with open("data/file.csv", encoding='utf-8') as r_file:
    # Создаем объект reader, указываем символ-разделитель ","
    file_reader = csv.reader(r_file, delimiter=",")
    # Счетчик для подсчета количества строк и вывода заголовков столбцов
    count = 0
    # Считывание данных из CSV файла
    for row in file_reader:
        if count == 0:
            # Вывод строки, содержащей заголовки для столбцов
            print(f'Файл содержит столбцы: {", ".join(row)}')
        else:
            # Вывод строк
            print(f'    {row[0]} - {row[1]} и он родился в {row[2]} году.')
        count += 1
    print(f'Всего в файле {count} строк.')
