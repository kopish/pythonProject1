'''
Отличительной особенностью генераторов является то, что они создаются не на основе классов, а путем вызова функции,
содержащей инструкцию yield, или специальным генераторным выражением по синтаксису похожим на генератор списка.
Отметим, генератор списка, который является особым выражением, к генераторам, которые являются разновидностью
объектов-итераторов, отношения не имеет. Подробнее можно почитать здесь.

Другими словами, если потребуется создать свой итератор, может оказаться проще определить функцию с yield или
воспользоваться выражением, чем создавать класс с методами __next__() и __iter__().
'''

from random import random


class RandomIncrease:
    def __init__(self, quantity):
        self.qty = quantity
        self.cur = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.qty > 0:
            self.cur += random()
            self.qty -= 1
            return round(self.cur, 2)
        else:
            raise StopIteration


iterator = RandomIncrease(5)
# Наш итератор выдает числа по нарастающей. При этом каждое следующее число больше предыдущего на случайную величину:
for i in iterator:
    print(i)
