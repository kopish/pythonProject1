'''
--------------ОТЛИЧИЕ ИМЕНОВАННОГО КОРТЕЖА(Namedtuple) ОТ СЛОВАРЯ--------------
Несмотря на сходство namedtuple и словаря, между ними имеются отличия:
- в словарь можно добавлять новые значения, а в именованный кортеж - нет!!!
- словари считаются более информативными и наглядными;
- для создания словаря требуется меньше строчек кода;
- к значению словаря получаем доступ через ключ, а в именованном кортеже через точечную нотацию или индекс.

Именованные кортежи улучшают читаемость кода и отдельных функций. С кодом комфортно работать, если помнить
назначение кортежа. Однако, скорее всего, после его создания, забудется уже через несколько дней.

Namedtuple - это замена обычных кортежей. Они выполняют те же функции, но улучшают читаемость кода. Даже если
программист приостановит работу над программой на несколько месяцев, синтаксис или значение самого кортежа будут
говорить сами за себя. Теперь время поговорить о самом синтаксисе таких кортежей.
Именованный кортеж — не часть стандартной библиотеки, он доступен в модуле collections.

Синтаксис namedtuple в Python
collections.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None)
'''
from collections import namedtuple

# Именованный кортеж
Person = namedtuple('Person', 'name surname')
named_tuple = Person('Иван', 'Сидоров')
print(named_tuple)

Person(name='Иван', surname='Сидоров')
print(named_tuple[0])

# объявление именованного кортежа, которое может использоваться для создания бесконечного количества аналогичных
# структур. Это еще называется ФАБРИКОЙ именованных кортежей.
Marks = namedtuple('Marks', 'Physics Chemistry Math English')
# эта строка создает именованный кортеж
marks = Marks(90, 85, 95, 100)
print(marks)
print(1)
# Создание namedtuple с помощью списка
lst = ['Physics', 'Chemistry', 'Math', 'English']
Marks = namedtuple('Marks', lst)
marks = Marks(90, 85, 95, 100)
print(marks)
print(2)
# Создание namedtuple с помощью словаря
# Стартовое значение словаря — 0, поскольку значение поля игнорируется кортежем.
dct = {'Physics': 0, 'Chemistry': 0, 'Math': 0, 'English': 0}
Marks = namedtuple('Marks', dct)
marks = Marks(90, 85, 95, 100)
print(marks)
print(3)
# Создание namedtuple с помощью кортежа
tupl = ('Physics', 'Chemistry', 'Math', 'English')
Marks = namedtuple('Marks', tupl)
marks = Marks(90, 85, 95, 100)
print(marks)
print(4)
# Создание namedtuple с помощью множества
subject_set = {'Physics', 'Chemistry', 'Math', 'English'}
Marks = namedtuple('Marks', subject_set)
marks = Marks(90, 85, 95, 100)
print(marks)
print(5)
# Именованный кортеж можно создать с помощью любой структуры данных, поддерживающей итерацию.

# Функция _make также принимает итерируемый объект (в случае со словарем — значение).
marks = Marks._make({55: 'Physics', 78: 'Chemistry', 98: 'Math', 90: 'English'})
print(marks)
print(6)
'''
Доступ к именам полей namedtuple в python
Дальше рассмотрим, как получать доступ к полям в именованном кортеже. Для этого есть несколько способов:

- Через смещение.
- Через точку.
- getattr().
Доступ к полям можно получить тем же способом, что и в кортежах — с помощью индекса.
'''
print(marks[0])
print(marks[3])
print(7)
# Также можно использовать названия полей по аналогии с атрибутами экземпляра класса.

print(marks.Physics)
print(marks.English)
print(8)
'''
Наконец, поля можно получить и с помощью функции getattr().

Как и стандартные кортежи в Python именованные является неизменяемыми. Это значит, что после объявления значения 
кортежа не могут быть изменены.
'''
# marks.Physics = 99 # AttributeError: can't set attribute

'''Изменение значения поля namedtuple
Несмотря на неизменяемость есть способ, с помощью которого можно менять значение поля. Для этого используется функция 
_replace.
'''

marks = marks._replace(Physics=99)
# Функция _replace() принимает имя поля и значение, которое нужно заменить, а возвращает именованный кортеж с измененным
# значением. Таким образом этот тип оказывается изменяемым с помощью одного простого трюка.
print(marks)
# Marks(Physics=99, Chemistry=78, Math=98, English=90)

