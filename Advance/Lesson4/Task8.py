# Сохранение резервной копии базы данных из Python
'''
Модуль sqlite3 в Python предоставляет функцию для сохранения резервной копии базы данных SQLite. С помощью метода
connection.backup() можно сделать резервную копию базы SQLite.

connection.backup(target, *, pages=0, progress=None, name="main", sleep=0.250)

Эта функция делает полную резервную копию базы данных SQLite. Изменения записываются в аргумент target, который должен
быть экземпляром другого соединения.

По умолчанию когда параметр pages равен 0 или отрицательному числу, вся база данных копируется в один шаг. В противном
случае метод выполняет цикл, копируя заданное количество страниц за раз.

Аргумент name определяет базу данных, резервную копию которой нужно сделать. Аргумент sleep — количество секунд между
последовательными попытками сохранить оставшиеся страницы. Аргумент sleep можно задать как в качестве целого числа, так
и в виде числа с плавающей точкой.
'''

import sqlite3


def progress(status, remaining, total):
    print(f'Скопировано {total-remaining} из {total}...')


try:
    sqlite_con = sqlite3.connect('sqlite_python.db')
    backup_con = sqlite3.connect('sqlite_backup.db')
    with backup_con:
        sqlite_con.backup(backup_con, pages=3, progress=progress)
    print("Резервное копирование выполнено успешно")

except sqlite3.Error as error:
    print("Ошибка при резервном копировании: ", error)

finally:
    if backup_con:
        backup_con.close()
        sqlite_con.close()

'''
После подключения к SQLite обе базы данных были открыты с помощью двух разных подключений.
Дальше выполняется метод connection.backup() с помощью экземпляра первого подключения. Также задано количество страниц, 
которые нужно скопировать за одну итерацию.
'''