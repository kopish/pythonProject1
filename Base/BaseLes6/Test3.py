"""
Использование генераторов является отличным способом оптимизации памяти. И хотя генератор бесконечной
последовательности является наиболее ярким примером этой оптимизации, рассмотрим еще один пример с возведением
числа в квадрат и проверим размер полученных объектов.

Можем сделать это с помощью вызова функции sys.getsizeof():
"""
import sys
nums_squared_lc = [i ** 2 for i in range(10000)]
print(sys.getsizeof(nums_squared_lc))

nums_squared_gc = (i ** 2 for i in range(10000))
print(sys.getsizeof(nums_squared_gc))
"""
Приходилось ли вам когда-либо работать с настолько большим набором данных, что он переполнял память вашего компьютера? 
Или быть может у вас была сложная функция, для которой нужно было бы сохранять внутреннее состояние при вызове? А если 
при этом функция была слишком маленькой, чтобы оправдать создание собственного класса? Во всех этих случаях вам придут 
на помощь генераторы Python и ключевое слово yield.

Функции генераторов представляют собой особый вид функций, которые возвращают «ленивый итератор». И хотя содержимое 
этих объектов вы можете перебирать также как и списки, но при этом, в отличие от списков, ленивые итераторы не хранят 
свое содержимое в памяти. Это общий принцип работы генераторов.
"""